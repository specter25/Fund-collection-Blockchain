{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Form, Input, Message, Button } from \"semantic-ui-react\";\nimport createCampaign from '../ethereum/campaign';\nimport web3 from '../ethereum/web3';\n\nclass ContributeForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      value: '',\n      errorMessage: '',\n      loading: ''\n    });\n\n    _defineProperty(this, \"handleChange\", e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n      console.log(this.state.value);\n    });\n\n    _defineProperty(this, \"handleSubmit\", async e => {\n      e.preventDefault();\n      const campaign = await createCampaign(this.props.address);\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        await campaign.methods.contribute().send({\n          from: accounts[0],\n          value: web3.utils.toWei(this.state.value, 'ether')\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Form, {\n      onSubmit: e => this.handleSubmit(e)\n    }, __jsx(Form.Field, null, __jsx(\"label\", null, \"Amount to contribute\"), __jsx(Input, {\n      name: \"value\",\n      label: \"ether\",\n      labelPosition: \"right\",\n      value: this.state.minimumContribution,\n      onChange: e => this.handleChange(e)\n    })), __jsx(Button, {\n      primary: true\n    }, \"Contribute!\")));\n  }\n\n}\n\nexport default ContributeForm;","map":null,"metadata":{},"sourceType":"module"}